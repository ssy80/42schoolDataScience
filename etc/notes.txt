
# install postgres 
sudo apt install postgresql


# check postgres status
sudo systemctl status postgresql

# default user
sudo -i -u postgres

# access psql
psql
ALTER USER postgres PASSWORD ssian12345;


# create user 
CREATE USER ssian WITH LOGIN PASSWORD 'mysecretpassword';


# sequence
sudo -u postgres psql
CREATE DATABASE piscineds;
CREATE USER ssian WITH LOGIN PASSWORD 'mysecretpassword';
GRANT ALL PRIVULEGES ON DATABASE piscineds to ssian; 


# stop postgres
sudo systemctl stop postgresql

# uninstall
sudo apt --purge remove postgresql\* -y

# delete folders
sudo rm -rf /var/lib/postgresql/
sudo rm -rf /etc/postgresql/
sudo rm -rf /etc/postgresql-common/
sudo rm -rf /var/log/postgresql/


# clean dependencies
sudo apt autoremove -y
sudo apt autoclean -y



# uninstall pgadmin4 and clean up
#sudo apt remove pgadmin4
#sudo apt purge pgadmin4  # optional: removes config files
#sudo apt autoremove      # optional: clean up unused packages
source ~/pgadmin4-venv/bin/activate
pip uninstall pgadmin4
sudo apt autoremove
sudo apt clean
sudo rm -rf /var/lib/pgadmin/
sudo rm -rf /var/log/pgadmin/
sudo rm -rf /etc/pgadmin/
sudo rm -rf ~/.pgadmin/        # User-specific config (if exists)
sudo rm -rf ~/.config/pgadmin/ # Another common user config location
sudo rm -rf ~/.local/share/pgadmin/



#Install pgAdmin 4 via Python
via ex01/pgadmin.sh
access at: http://localhost:8080


mkdir -p ~/pgadmin4-data
export PGADMIN_CONFIG_HOME=~/pgadmin4-data


#Install PostgreSQL Client Tools
sudo apt install postgresql-client


# LOGIN
psql -U ssian -d piscineds -h localhost -W


# copy from csv into table in psql
psql -U ssian -d piscineds -h localhost -W



\copy customer.data_2022_dec (event_time, event_type, product_id, price, user_id, user_session)
FROM '/home/soonyee/42schoolDataScience/subject/customer/data_2022_dec.csv'
DELIMITER ','
CSV HEADER;



# some SQL queries

select * from customer.data_2022_dec where user_session is null;
delete from customer.data_2022_dec;


#connect to postgres in Python
pip install psycopg2-binary

CREATE TABLE customer2.customers AS 
SELECT * FROM customer2.data_2022_oct 
UNION ALL 
SELECT * FROM customer2.data_2022_nov 
UNION ALL 
SELECT * FROM customer2.data_2022_dec 
UNION ALL 
SELECT * FROM customer2.data_2023_jan 
UNION ALL 
SELECT * FROM customer2.data_2023_feb


--select count(*) from customer2.data_2022_oct;
--select count(*) from customer2.data_2022_nov;
--select count(*) from customer2.data_2022_dec;
--select count(*) from customer2.data_2023_jan;
--select count(*) from customer2.data_2023_feb;

data_2022_oct
4102283
data_2022_nov
4635837
data_2022_dec
3533286
data_2023_jan
4264752
data_2023_feb
4156682
Total: 20692840

customers
20692840


check total rows in customers after combined
remove duplicates
check total rows in customers - 19176658 
alter table
update customers with items - 19175318
check total rows in customers - 19176658


total items - 109579
DELETE 38468
after remove duplicate - 71111


2137

"""

#Deletes rows based on their physical row ID (ctid) â€” a system column in PostgreSQL that uniquely identifies a row version inside a table.

DELETE FROM customer2.customers 
WHERE ctid IN (
    SELECT c1.ctid
    FROM customer2.customers c1
    INNER JOIN customer2.customers c2 ON 
        c1.event_type = c2.event_type 
        AND c1.product_id = c2.product_id
        AND c1.user_id = c2.user_id
        AND c1.user_session = c2.user_session
        AND c1.price = c2.price
        AND (ABS(EXTRACT(EPOCH FROM (c1.event_time - c2.event_time))) <= 1 OR c1.event_time = c2.event_time)
        AND c1.ctid > c2.ctid  -- Keep the earliest record
);
DELETE FROM customer2.customers 
WHERE ctid IN (
    SELECT c1.ctid
    FROM customer2.customers c1
    INNER JOIN customer2.customers c2 ON 
        c1.event_type = c2.event_type 
        AND c1.product_id = c2.product_id
        AND c1.user_id = c2.user_id
        AND c1.user_session = c2.user_session
        AND c1.price = c2.price
        AND c1.event_time BETWEEN c2.event_time - INTERVAL '1 second'
                              AND c2.event_time + INTERVAL '1 second'
        AND c1.ctid > c2.ctid  -- keep the earliest record
);

"""


--select * from customer2.customers where event_type='purchase' and user_id = 474232307 ORDER BY event_time ASC;

--select sum(price) from customer2.customers where event_type='purchase' AND event_time >= '2022-10-01' 
--AND event_time < '2022-11-01';


